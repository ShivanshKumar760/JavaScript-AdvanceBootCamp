Primitive
In JavaScript, a primitive (primitive value, primitive data type) is data that is not an object and has no methods or properties. There are 7 primitive data types:

string
number
bigint
boolean
undefined
symbol
null
Most of the time, a primitive value is represented directly at the lowest level of the language implementation.

All primitives are immutable; that is, they cannot be altered. It is important not to confuse a primitive itself with a variable assigned a primitive value. The variable may be reassigned to a new value, but the existing value can not be changed in the ways that objects, arrays, and functions can be altered. The language does not offer utilities to mutate primitive values.

Primitives have no methods but still behave as if they do. When properties are accessed on primitives, JavaScript auto-boxes the value into a wrapper object and accesses the property on that object instead. For example, "foo".includes("f") implicitly creates a String wrapper object and calls String.prototype.includes() on that object. This auto-boxing behavior is not observable in JavaScript code but is a good mental model of various behaviors â€” for example, why "mutating" primitives does not work (because str.foo = 1 is not assigning to the property foo of str itself, but to an ephemeral wrapper object).

------------------------------------------------------------------------------------------------
Now How to declare these data type:

String : it is a collection of letter enclosed in double quotation.
let string1="hello";
-------------------------------------------------------------------

Number:number in javascript can be whole or decimal pointed ie 3 or 3.5 both are number
let number1=3;
let number2=4.5;

------------------------------------------------------------------------------------------
BigInt-JavaScript BigInt variables are used to store big integer values that are too big to be represented by a normal JavaScript Number


JavaScript integers are only accurate up to 15 digits:

Integer Precision
let x = 999999999999999;
let y = 9999999999999999;
In JavaScript, all numbers are stored in a 64-bit floating-point format (IEEE 754 standard).

With this standard, large integer cannot be exactly represented and will be rounded.

Because of this, JavaScript can only safely represent integers:

Up to 9007199254740991 ==+(2^53-1)

and

Down to -9007199254740991 -(2^53-1).

Integer values outside this range lose precision.

How to Create a BigInt
To create a BigInt, append n to the end of an integer or call BigInt():

Examples
let x = 9999999999999999;
let y = 9999999999999999n;
let x = 1234567890123456789012345n;
let y = BigInt(1234567890123456789012345)

-------------------------------------------------------------------------------------------------
Boolean - these are the true and false value 
let y=true;
let n=false;
-------------------------------------------------------------------------------------------------
undefined -When a variable is not given any value it if given a undefined datatype.
-------------------------------------------------------------------------------------------------
null-In JavaScript, null is a special value that represents an empty or unknown value. For example,

let number = null;
The code above suggests that the number variable is empty at the moment and may have a value later.

Note: null is not the same as NULL or Null.
------------------------------------------------------------------------------------------------


False Values
In JavaScript, undefined and null are treated as false values. For example,

if(null || undefined ) {
    console.log('null is true');
} else {
    console.log('null is false');
}
Run Code
Output

null is false
An undefined or null gets converted to false when used with the Boolean() function. For example,

let result;

result = Boolean(undefined);
console.log(result); // false

result = Boolean(null);
console.log(result); // false
-------------------------------------------------------------------------------------------------
JavaScript Symbol
The JavaScript ES6 introduced a new primitive data type called Symbol. Symbols are immutable (cannot be changed) and are unique. For example,

// two symbols with the same description

const value1 = Symbol('hello');
const value2 = Symbol('hello');

console.log(value1 === value2); // false
Though value1 and value2 both contain the same description, they are different.

Creating Symbol
You use the Symbol() function to create a Symbol. For example,

// creating symbol
const x = Symbol()

typeof x; // symbol
You can pass an optional string as its description. For example,

const x = Symbol('hey');
console.log(x); // Symbol(hey)
Access Symbol Description
To access the description of a symbol, we use the . operator. For example,

const x = Symbol('hey');
console.log(x.description); // hey